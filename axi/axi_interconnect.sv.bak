`include "axi_interface.sv"
`include "axi_arbiter.sv"
module axi_interconnect(
	input clk,
	input reset,
	axi_interface.master axi_bus_m0,//sdram controller
	axi_interface.master axi_bus_m1,//f2h_bridge 
	axi_interface.slave  axi_bus_s0,//h2f_briege
	axi_interface.slave  axi_bus_s1);//JBush core

	localparam M1_BASE_ADDRESS = 32'hfffee000;

	typedef enum {
		STATE_ARBITRATE,
		STATE_ISSUE_ADDRESS,
		STATE_ACTIVE_BURST
	} burst_state_t;
	
	//
	// Write handling. Only slave interface 0 does writes.
	// XXX I don't explicitly handle the response in the state machine, but it
	// works because everything is in the correct state when the transaction is finished.
	// This could introduce a subtle bug if the behavior of the core changed.
	//
	burst_state_t write_state;
	logic[31:0] write_burst_address;
	logic[7:0] write_burst_length;	// Like axi_awlen, this is number of transfers minus 1
	logic write_master_select;
	logic slave_select;
	logic dir;
	logic master_select;
	
	axi_arbiter arbiter(
	.clk(clk),
	.reset(reset),
	.axi_bus_m0(axi_bus_m0),
	.axi_bus_m1(axi_bus_m1),
	.axi_bus_s0(axi_bus_s0),
	.axi_bus_s1(axi_bus_s1),
	.state(slave_select),
	.dir(dir));

	always_comb
	begin
		if(reset)
		begin
			slave_select = 1'bz;
		end
		else
		begin
			case(slave_select)
			1'b0://
			begin
				if(axi_bus_s0.awvalid)
				begin
					if(axi_bus_s0.awaddr<32'h10000000)
					begin
						axi_bus_m0.awaddr = axi_bus_s0.awaddr;
						axi_bus_m0.awlen = axi_bus_s0.awlen;
						axi_bus_m0.awsize = axi_bus_s0.awsize;
						axi_bus_m0.awburst = axi_bus_s0.awburst;
						axi_bus_m0.wdata = axi_bus_s0.wdata;
						axi_bus_m0.wlast = axi_bus_s0.wlast;
						axi_bus_m0.wstrb = axi_bus_s0.wstrb;
						axi_bus_m0.bready = axi_bus_s0.bready;
					end
					else
					begin
						axi_bus_m1.awaddr = axi_bus_s0.awaddr;
						axi_bus_m1.awlen = axi_bus_s0.awlen;
						axi_bus_m1.awsize = axi_bus_s0.awsize;
						axi_bus_m1.awburst = axi_bus_s0.awburst;
						axi_bus_m1.wdata = axi_bus_s0.wdata;
						axi_bus_m1.wlast = axi_bus_s0.wlast;
						axi_bus_m1.wstrb = axi_bus_s0.wstrb;
						axi_bus_m1.bready = axi_bus_s0.bready;
					end
				end
				else if (axi_bus_s0.arvalid)
				begin
					if(axi_bus_s0.araddr<32'h10000000)
					begin
						axi_bus_m0.araddr = axi_bus_s0.awaddr;
						axi_bus_m0.arlen = axi_bus_s0.awlen;
						axi_bus_m0.arsize = axi_bus_s0.awsize;
						axi_bus_m0.arburst = axi_bus_s0.awburst;
						axi_bus_m0.rready = axi_bus_s0.bready;
					end
					else
					begin
						axi_bus_m1.araddr = axi_bus_s0.awaddr;
						axi_bus_m1.arlen = axi_bus_s0.awlen;
						axi_bus_m1.arsize = axi_bus_s0.awsize;
						axi_bus_m1.arburst = axi_bus_s0.awburst;
						axi_bus_m1.rready = axi_bus_s0.bready;
					end
				end
			end
			1'b1://
			begin
				
			end
		end
	end
	
	
endmodule